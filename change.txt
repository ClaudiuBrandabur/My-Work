





--------------------------------------user-management.component.html---------------------------------

<p-panel header="{{'userManagement.home.title'|translate}}">
    <div class="ui-g ui-fluid">

        <div>
            <p jhiTranslate="userManagement.usersNumber" translateValues="{total: '{{ users.length }}'}">There are {{ users.length }} users.</p>
        </div>

        <div class="ui-g form-group" style="margin-top:20px;padding-top: 20px;">
            <div class="ui-g form-group" style="margin-top:20px;padding-top: 20px;">

                <table bord>
                    <tr>
                        <td width="80%" align="left">
                            <h2>
                                <span jhiTranslate="userManagement.home.title"></span>
                            </h2>
                        </td>
                        <td width="20%" align="right">
                            <button  icon="ui-icon-add" pbuttontype="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-icon-only float-right"
                                     [routerLink]="['/', { outlets: { popup: ['user-management-new'] } }]">
                            <span class="ui-button-icon-right ui-clickable fa fa-fw ui-icon-add">

                            </span>
                                <span class="ui-button-text ui-clickable">
                                ui-btn
                            </span>
                                <span class="ink ripple-animate" style="height: 25px; width: 25px; top: -1.6875px; pointer-events: none;">

                            </span>
                            </button>

                            <span jhiTranslate="userManagement.home.createLabel"></span>
                        </td>
                    </tr>
                </table>

            </div>
        </div>

    </div>
</p-panel>








----------------------------------user-management.json-----------------------
------------------------------------------RO---------------------------------

{
    "userManagement": {
        "usersNumber": "Sunt {{total}} utilizatori inregistrati.",
        "home": {
            "title": "Utilizatori",
            "createLabel": "Creaza un nou utilizator",
            "createOrEditLabel": "Creaza sau editeaza un utilizator"
        },
        "created": "A new user is created with identifier {{ param }}",
        "updated": "An user is updated with identifier {{ param }}",
        "deleted": "An user is deleted with identifier {{ param }}",
        "delete": {
            "question": "E?ti sigur ca dore?ti sa stergi utilizaotorul {{ login }}?"
        },
        "detail": {
            "title": "Utilizator"
        },
        "login": "Login",
        "firstName": "Prenume",
        "lastName": "Nume",
        "email": "Email",
        "activated": "Activat",
        "deactivated": "Dezactivat",
        "profiles": "Profile",
        "langKey": "Limba",
        "createdBy": "Creat de",
        "createdDate": "Creat la data",
        "lastModifiedBy": "Modifica de",
        "lastModifiedDate": "Modificat la data"
    }
}











----------------------------------user-management.json-----------------------
------------------------------------------EN---------------------------------


{
    "userManagement": {
        "usersNumber": "There are {{total}} registred users.",
        "home": {
            "title": "Users",
            "createLabel": "Create a new user",
            "createOrEditLabel": "Create or edit a user"
        },
        "created": "A new user is created with identifier {{ param }}",
        "updated": "An user is updated with identifier {{ param }}",
        "deleted": "An user is deleted with identifier {{ param }}",
        "delete": {
            "question": "Are you sure you want to delete user {{ login }}?"
        },
        "detail": {
            "title": "User"
        },
        "login": "Login",
        "firstName": "First name",
        "lastName": "Last name",
        "email": "Email",
        "activated": "Activated",
        "deactivated": "Deactivated",
        "profiles": "Profiles",
        "langKey": "Language",
        "createdBy": "Created by",
        "createdDate": "Created date",
        "lastModifiedBy": "Modified by",
        "lastModifiedDate": "Modified date"
    }
}








------------------------------user.model.ts-------------------------

export class User {
    constructor(public username: string,
                public firstName: string,
                public lastName: string,
                public email: string,
                public activated: boolean,
                public activatedByAdmin: boolean) {
    }
}











-------------------------user-modal.service.ts---------------


import {Component, Injectable} from '@angular/core';
import {Router} from '@angular/router';
import {NgbModal, NgbModalRef} from '@ng-bootstrap/ng-bootstrap';
import {User, UserService} from '../../shared';
import {Observable} from 'rxjs/Rx';
import {Http, Response} from '@angular/http';

@Injectable()
export class UserModalService {
    private isOpen = false;

    constructor(private modalService: NgbModal,
                private router: Router,
                private userService: UserService,
                private http: Http) {
    }

    open(component: Component, login?: string): NgbModalRef {
        if (this.isOpen) {
            return;
        }
        this.isOpen = true;

        if (login) {
            this.userService.find(login).subscribe(user => this.userModalRef(component, user));
        } else {
            return this.userModalRef(component, new User());
        }
    }

    userModalRef(component: Component, user: User): NgbModalRef {
        let modalRef = this.modalService.open(component, {size: 'lg', backdrop: 'static'});
        modalRef.componentInstance.user = user;
        modalRef.result.then(result => {
            console.log(`Closed with: ${result}`);
            this.router.navigate([{outlets: {popup: null}}], {replaceUrl: true});
            this.isOpen = false;
        }, (reason) => {
            console.log(`Dismissed ${reason}`);
            this.router.navigate([{outlets: {popup: null}}], {replaceUrl: true});
            this.isOpen = false;
        });
        return modalRef;
    }

    public findAll(): Observable<any> {
        return this.http.get('api/adminAccount/allAccount', {})
            .map((res: Response) => res.json());
    }
}














------------------------------------------user-management.component.ts----------------------


import {Component, OnDestroy, OnInit} from '@angular/core';
import {Response} from '@angular/http';
import {ActivatedRoute, Router} from '@angular/router';
import {JhiAlertService, JhiEventManager, JhiLanguageService, JhiPaginationUtil, JhiParseLinks} from 'ng-jhipster';

import {ITEMS_PER_PAGE, Principal, User, UserService} from '../../shared';
import {PaginationConfig} from '../../blocks/config/uib-pagination.config';
import {UserModalService} from "./user-modal.service";

@Component({
    selector: 'jhi-user-mgmt',
    templateUrl: './user-management.component.html'
})
export class UserMgmtComponent implements OnInit, OnDestroy {

    currentAccount: any;
    users: User[];
    error: any;
    success: any;
    routeData: any;
    links: any;
    totalItems: any;
    queryCount: any;
    itemsPerPage: any;
    page: any;
    predicate: any;
    previousPage: any;
    reverse: any;

    constructor(private jhiLanguageService: JhiLanguageService,
                private userService: UserService,
                private parseLinks: JhiParseLinks,
                private alertService: JhiAlertService,
                private principal: Principal,
                private eventManager: JhiEventManager, private paginationUtil: JhiPaginationUtil,
                private paginationConfig: PaginationConfig,
                private activatedRoute: ActivatedRoute,
                private router: Router,
                private userModalService: UserModalService) {
        this.itemsPerPage = ITEMS_PER_PAGE;
        this.routeData = this.activatedRoute.data.subscribe(data => {
            this.page = data['pagingParams'].page;
            this.previousPage = data['pagingParams'].page;
            this.reverse = data['pagingParams'].ascending;
            this.predicate = data['pagingParams'].predicate;
        });

    }

    ngOnInit() {
        this.principal.identity().then((account) => {
            this.currentAccount = account;
            this.loadAll();
            this.registerChangeInUsers();
        });
        this.userModalService.findAll().subscribe(users => this.users = users);
    }

    ngOnDestroy() {
        this.routeData.unsubscribe();
    }

    registerChangeInUsers() {
        this.eventManager.subscribe('userListModification', (response) => this.loadAll());
    }

    setActive(user, isActivated) {
        user.activated = isActivated;

        this.userService.update(user).subscribe(
            response => {
                if (response.status === 200) {
                    this.error = null;
                    this.success = 'OK';
                    this.loadAll();
                } else {
                    this.success = null;
                    this.error = 'ERROR';
                }
            });
    }

    loadAll() {
        this.userService.query({
            page: this.page - 1,
            size: this.itemsPerPage,
            sort: this.sort()
        }).subscribe(
            (res: Response) => this.onSuccess(res.json(), res.headers),
            (res: Response) => this.onError(res.json())
        );
    }

    trackIdentity(index, item: User) {
        return item.id;
    }

    sort() {
        let result = [this.predicate + ',' + (this.reverse ? 'asc' : 'desc')];
        if (this.predicate !== 'id') {
            result.push('id');
        }
        return result;
    }

    loadPage(page: number) {
        if (page !== this.previousPage) {
            this.previousPage = page;
            this.transition();
        }
    }

    transition() {
        this.router.navigate(['/user-management'], {
            queryParams: {
                page: this.page,
                sort: this.predicate + ',' + (this.reverse ? 'asc' : 'desc')
            }
        });
        this.loadAll();
    }

    private onSuccess(data, headers) {
        // hide anonymous user from user management: it's a required user for Spring Security
        let hiddenUsersSize = 0;
        for (let i in data) {
            if (data[i]['login'] === 'anonymoususer') {
                data.splice(i, 1);
                hiddenUsersSize++;
            }
        }
        this.links = this.parseLinks.parse(headers.get('link'));
        this.totalItems = headers.get('X-Total-Count') - hiddenUsersSize;
        this.queryCount = this.totalItems;
        this.users = data;
    }

    private onError(error) {
        this.alertService.error(error.error, error.message, null);
    }
}










-----------------------profile.component.html---------------------


<div class="profile" [ngClass]="{'profile-expanded':active}">
    <div class="profile-image"></div>
    <a href="#" (click)="onClick($event)">
        <span class="profile-name" *ngIf="account">{{account.firstName}} {{account.lastName}}</span>
        <i class="material-icons">keyboard_arrow_down</i>
    </a>
</div>

<ul class="ultima-menu profile-menu" [@menu]="active ? 'visible' : 'hidden'">
    <li role="menuitem">
        <a routerLink="profile" class="ripplelink" [attr.tabindex]="!active ? '-1' : null">
            <i class="material-icons">person</i>
            <span jhiTranslate="global.menu.account.main">Profile</span>
        </a>
    </li>

    <li role="menuitem">
        <a href="#" class="ripplelink" (click)="onClickPrivacy($event)">
            <i class="material-icons">security</i>
            <span>Privacy</span>
            <i class="material-icons">keyboard_arrow_down</i>
        </a>

        <ul [hidden] = "activePrivacySubmenu">
            <li>
                <a routerLink="password" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Schimbare parola</span>
                </a>
            </li>
            <li>
                <a href="#" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Schimbare organizatie</span>
                </a>
            </li>
        </ul>
    </li>

    <li role="menuitem">
        <a href="#" class="ripplelink" (click)="onClickSettings($event)">
            <i class="material-icons">settings_application</i>
            <span jhiTranslate="global.menu.account.settings">Settings</span>
            <i class="material-icons">keyboard_arrow_down</i>
        </a>

        <ul [hidden] = "activeSettingsSubmenu">
            <li>
                <a href="#security" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Security settings</span>
                </a>
            </li>
            <li>
                <a href="#user-management" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>User tracker</span>
                </a>
            </li>
            <li>
                <a href="#" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Metrics</span>
                </a>
            </li>
            <li>
                <a href="#" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Health</span>
                </a>
            </li>
            <li>
                <a href="#" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Configuration</span>
                </a>
            </li>
            <li>
                <a href="#" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Audits</span>
                </a>
            </li>
            <li>
                <a routerLink="logs" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Logs</span>
                </a>
            </li>
            <li>
                <a href="#" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>API</span>
                </a>
            </li>
            <li>
                <a href="#" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Meniuri</span>
                </a>
            </li>
            <li>
                <a href="#" class="ripplelink">
                    <i class="material-icons">subject</i>
                    <span>Sesiuni</span>
                </a>
            </li>
        </ul>
    </li>

    <li role="menuitem">
        <a href="#" class="ripplelink" [attr.tabindex]="!active ? '-1' : null" (click)="logout()">
            <i class="material-icons">power_settings_new</i>
            <span jhiTranslate="global.menu.account.logout">Logout</span>
        </a>
    </li>
</ul>



















------------------------------------------------------------









